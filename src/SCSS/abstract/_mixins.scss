@import 'variables';
@import 'functions';

@mixin media($query) {
  $break-point: str-slice($query, 4);

  $condition: 'min-width';
  @if str-index($query, '<=') {
    $condition: 'min-width';
  } @else if str-index($query, '>=') {
    $condition: 'max-width';
  }

  @media screen and ( #{$condition}: map-get($break-points, $break-point )) {
    @content;
  }
}

@mixin bottom-shadow() {
  box-shadow: 0 5px 10px rgba(#000000, 0.35);
}

@mixin shadow() {
  box-shadow: 0 0 5px rgba(#000000, 0.35);
}

@mixin transition() {
  transition: all 0.3s ease-in-out;
}

@mixin center-fullscreen() {
  height: 100vh;

  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin focus($type: 'not-button') {
  outline: none;

  @if ($type == 'button') {
    &:focus-visible {
      outline: 2px solid color();
    }
  } @else {
    @include transition();

    &:focus {
      @include shadow();
    }
  }
}

@mixin text-3d($color: color(white), $shadow: color()) {
  $LIGHTING_FLOOR: 1;
  $LIGHTING_CEIL: 2;
  $LIGHTING_FLAT: 3;
  $primary: adjust-color($shadow, $lightness: -8%);
  $depth: 8;
  $shadowsteps: 5;
  $shadowincrementer: 4px;
  $shadowopacity: 0.5;
  $primaryshadowcolour: adjust-color($shadow, $lightness: -10%, $saturation: +20%);
  $lighting: $LIGHTING_CEIL;

  $predefinedShadows: (
    0 0 5px rgba($primaryshadowcolour, 0.05),
    0 -1px 3px rgba($primaryshadowcolour, 0.2),
    0 3px 5px rgba($primaryshadowcolour, 0.2)
  );
  $value: ();
  @for $i from 1 through $depth {
    $num: $i + px;
    $hueadjust: $i;
    @if ($lighting == $LIGHTING_FLOOR) {
      $hueadjust: ($i * 2 - $depth - 5) * 1%;
    } @else if ($lighting == $LIGHTING_CEIL) {
      $hueadjust: -($i * 2 + $depth - 10) * 1%;
    } @else if ($lighting == $LIGHTING_FLAT) {
      $hueadjust: -$depth * 1%;
    }
    $colour: adjust-color($primary, $lightness: $hueadjust);
    $theShadow: 0 $num 0 $colour;
    $value: append($value, $theShadow, comma);
  }

  @for $i from 1 through $shadowsteps {
    @if ($i >= length($predefinedShadows)) {
      $dist: $i * $shadowincrementer;
      $value: append($value, 0 $dist $dist rgba($primaryshadowcolour, $shadowopacity));
    } @else {
      $value: append($value, nth($predefinedShadows, $i));
    }
  }

  color: $color;
  font-weight: font-weight(bold);

  text-shadow: $value;
}
